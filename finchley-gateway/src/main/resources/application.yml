spring:
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
  redis:
    host: 192.168.0.240
    port: 6379
    jedis:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: 1
    database: 1
#      routes:
#      - id: service_route
#        uri: lb://user
#        predicates:
#        - Path=/test/**
#        filters:
        # 断路器filter
#        - name: Hystrix
#          args:
#            name: fallbackcmd
#            fallbackUri: forward:/fallback
        # 限流filter
#        - name: RequestRateLimiter
#          args:
#            redis-rate-limiter.replenishRate: 10
#            redis-rate-limiter.burstCapacity: 20
        # 重试filter At this time a URI using the forward protocol does not support using the retry filter.
#        - name: Retry
#          args:
#            retries: 3
#            statuses: BAD_GATEWAY
#        - StripPrefix=1
#        - name: PreGatewayFilterFactory
  application:
    name: gateway
        #自定义限流filter A rate limiter can also be defined as a bean implementing the RateLimiter interface. In configuration, reference the bean by name using SpEL. #{@myRateLimiter} is a SpEL expression referencing a bean with the name myRateLimiter.
        #- name: RequestRateLimiter
          #args:
            #rate-limiter: "#{@myRateLimiter}"
            #key-resolver: "#{@userKeyResolver}"
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 3000

eureka:
  client:
    serviceUrl:
      defaultZone: http://admin:pwd@localhost:8761/eureka/
server:
  port: 1000
logging:
  file: gateway.log